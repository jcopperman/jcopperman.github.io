openapi: 3.0.3
info:
  title: PayFlow API
  description: >-
    PayFlow is a fictional fintech API that enables developers to create and manage payments, customers, and refunds.
    This sample demonstrates OpenAPI 3.0 structure including authentication, request bodies, query parameters, and response codes.
  version: 1.0.0
servers:
  - url: https://api.payflow.example.com/v1
    description: Production environment
  - url: https://sandbox.payflow.example.com/v1
    description: Sandbox environment

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Payment:
      type: object
      properties:
        id:
          type: string
          example: pay_12345
        amount:
          type: integer
          example: 2500
        currency:
          type: string
          example: ZAR
        status:
          type: string
          enum:
            - pending
            - succeeded
            - failed
          example: succeeded
        created_at:
          type: string
          format: date-time
          example: "2025-08-07T12:00:00Z"

security:
  - BearerAuth: []

paths:
  /payments:
    post:
      summary: Create a payment
      tags:
        - Payments
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
                - currency
                - customer_id
              properties:
                amount:
                  type: integer
                  example: 1500
                currency:
                  type: string
                  example: ZAR
                customer_id:
                  type: string
                  example: cus_78910
      responses:
        '201':
          description: Payment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
    get:
      summary: List payments
      tags:
        - Payments
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: Number of payments to return
        - in: query
          name: starting_after
          schema:
            type: string
          description: Payment ID to start pagination from
      responses:
        '200':
          description: A list of payments
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Payment'
                  has_more:
                    type: boolean
                    example: false

  /payments/{payment_id}:
    get:
      summary: Retrieve a payment by ID
      tags:
        - Payments
      parameters:
        - in: path
          name: payment_id
          required: true
          schema:
            type: string
          description: The ID of the payment to retrieve
      responses:
        '200':
          description: Payment found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '404':
          description: Payment not found
